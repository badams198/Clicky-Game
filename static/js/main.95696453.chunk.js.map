{"version":3,"sources":["components/Display.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["styles","imageStyle","height","width","Display","props","this","style","className","key","id","src","alt","Component","Navbar","App","state","images","backgroundImage","backgroundRepeat","backgroundsize","map","image","href","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0/DAEMA,G,MAAS,CACXC,WAAY,CACRC,OAAO,IACPC,MAAM,OAmBCC,E,iLAZP,IAAMC,EAAQC,KAAKD,MAEnB,OACI,yBAAKE,MAAOP,EAAOC,WAAYO,UAAU,+CACzCC,IAAKJ,EAAMK,GACXC,IAAKN,EAAMM,IACXC,IAAKP,EAAMO,U,GATDC,aCSPC,E,iLAXP,OACI,yBAAKN,UAAW,+BACZ,yBAAKA,UAAU,kCACX,iDACA,iK,GATCK,aC+CNE,E,2MAzCbC,MAAQ,CACNC,U,wEAYA,OACE,yBAAKV,MARY,CACfW,gBAAiB,mBACjBC,iBAAkB,YAClBC,eAAgB,UAMhB,kBAAC,EAAD,MACA,yBAAKZ,UAAW,YAAYC,IAAI,iBAC9B,yBAAKD,UAAU,MAAMC,IAAI,YAErBH,KAAKU,MAAMC,OAAOI,KAAI,SAAAC,GAAK,OACzB,uBACAC,KAAK,IACLd,IAAKa,EAAMZ,GACXF,UAAW,wBAET,kBAAC,EAAD,CACAC,IAAKa,EAAMZ,GACXA,GAAIY,EAAMZ,GACVC,IAAKW,EAAMA,MACXV,IAAKU,EAAME,kB,GA/BXX,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.95696453.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nconst styles = {\r\n    imageStyle: {\r\n        height:150,\r\n        width:150,\r\n    }\r\n}\r\n\r\nclass Display extends Component {\r\n\r\n    render () {\r\n        const props = this.props\r\n\r\n        return (\r\n            <img style={styles.imageStyle} className='profile m-2 text-center bg-light text-center'\r\n            key={props.id}\r\n            src={props.src}\r\n            alt={props.alt}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Display;","import React, {Component} from 'react'\r\n\r\nclass Navbar extends Component{\r\n\r\n    render (){\r\n        //const props = this.props\r\n\r\n        return (\r\n            <div className= 'row py-3 bg-dark text-light'>\r\n                <div className='offset-lg-1 col-lg-5 text-left'>\r\n                    <h1>Zelda Memory Game</h1>\r\n                    <p>Click a picture to earn a point(Get 12 points to win) and shuffle the pictures. Don't click the same picture more than once!</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\nimport images from './images'; // array of image objects\nimport './App.css'; // default styling\nimport Display from './components/Display'; // sends images to DOM\nimport Navbar from './components/Navbar'; \n\nclass App extends Component {\n\n  state = {\n    images,\n  }\n\n  render () {\n    const style = {\n      backgroundStyle: {\n        backgroundImage: 'url(zeldabg.png)',\n        backgroundRepeat: 'no-repeat',\n        backgroundsize: 'cover',\n      }\n    };\n\n    return (\n      <div style={style.backgroundStyle}>\n        <Navbar/>\n        <div className= \"container\" key=\"picsContainer\">\n          <div className='row' key='imageRow'>\n            {\n              this.state.images.map(image => (\n                <a\n                href='/'\n                key={image.id}\n                className= 'col-sm-4 text-center'\n                >\n                  <Display\n                  key={image.id}\n                  id={image.id}\n                  src={image.image}\n                  alt={image.name} />\n                </a>\n              ))\n            }\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}